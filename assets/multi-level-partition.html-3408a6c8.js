import{_ as r,M as e,p as k,q as u,N as s,R as n,V as t,t as a,a1 as i}from"./framework-de73eade.js";const d="/PolarDB-for-PostgreSQL/assets/htap-multi-level-partition-1-c17a6008.png",m={},w=n("h1",{id:"多级分区表静态裁剪与并行扫描",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#多级分区表静态裁剪与并行扫描","aria-hidden":"true"},"#"),a(" 多级分区表静态裁剪与并行扫描")],-1),_={class:"table-of-contents"},y=i('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>随着数据量的不断增长，表的规模将会越来越大。为了方便管理和提高查询性能，用户一般会使用分区表，将大表拆分成多个子分区表，每个子分区表又进一步可以拆成二级子分区表，从而形成了多级分区表。</p><p>PolarDB for PostgreSQL 支持多级分区表的静态分区裁剪，避免对无关分区进行扫描。同时，针对被裁剪后的分区表，可以进一步开启并行查询能力，从而加快分区表的查询性能。</p><h2 id="术语" tabindex="-1"><a class="header-anchor" href="#术语" aria-hidden="true">#</a> 术语</h2><ul><li>QC：Query Coordinator，发起 PX 并行查询的进程角色。</li><li>PX Worker：参与 PX 跨节点并行查询的工作进程角色。</li><li>Worker ID：唯一标识一个 PX Worker 的编号。</li></ul><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><p>在多级分区表中，每一级分区表的分区维度可以不同，如下图所示：比如一级分区表按照时间（date）维度分区，二级分区表按照地域（region）维度分区。当 QC 发起查询时，优化器可以根据查询条件（如 <code>date = &#39;202201&#39; AND region = &#39;beijing&#39;</code>）与每一级分区表的分区键进行匹配，从而过滤掉不需要被扫描的子分区，只保留符合条件的分区表。</p><p>如果满足条件的分区表数量较多，或者分区表中数据较多，那么可以结合 PolarDB for PostgreSQL 的并行查询（PX）能力，并行扫描对应的数据页面。在 PolarDB for PostgreSQL 共享存储的架构下，读写节点和只读节点对所有表数据都是可见的，因此可以在多个只读节点中启动 PX Worker 并行扫描，最后将结果汇总到 QC 进程。</p><p><img src="'+d+`" alt="multi-level-partition"></p><h2 id="使用指南" tabindex="-1"><a class="header-anchor" href="#使用指南" aria-hidden="true">#</a> 使用指南</h2><h3 id="guc-参数" tabindex="-1"><a class="header-anchor" href="#guc-参数" aria-hidden="true">#</a> GUC 参数</h3><p>多级分区表并行查询功能依赖如下两个 GUC 参数：</p><table><thead><tr><th>GUC 参数名</th><th>参数说明</th></tr></thead><tbody><tr><td><code>polar_enable_px</code></td><td>开启 PolarDB PostgreSQL 的并行查询功能</td></tr><tr><td><code>polar_px_optimizer_multilevel_partitioning</code></td><td>开启多级分区表并行查询功能</td></tr></tbody></table><p>具体开启方式如下：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> polar_enable_px <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span>
<span class="token keyword">SET</span> polar_px_optimizer_multilevel_partitioning <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="创建多级分区表" tabindex="-1"><a class="header-anchor" href="#创建多级分区表" aria-hidden="true">#</a> 创建多级分区表</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 主表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> range_list <span class="token punctuation">(</span>a <span class="token keyword">int</span><span class="token punctuation">,</span>b <span class="token keyword">timestamp</span><span class="token punctuation">,</span>c <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建两个一级分区表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> range_pa1 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> range_list <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token string">&#39;2000-01-01&#39;</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token string">&#39;2010-01-01&#39;</span><span class="token punctuation">)</span>  <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> range_pa2 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> range_list <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token string">&#39;2010-01-01&#39;</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token string">&#39;2020-01-01&#39;</span><span class="token punctuation">)</span>  <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 分别为每个一级分区表创建两个二级子分区表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> range_list_2000_2010_1_10  <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> range_pa1 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> range_list_2000_2010_10_20 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> range_pa1 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">2000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> range_list_2010_2020_1_10  <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> range_pa2 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> range_list_2010_2020_10_20 <span class="token keyword">PARTITION</span> <span class="token keyword">OF</span> range_pa2 <span class="token keyword">FOR</span> <span class="token keyword">VALUES</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token punctuation">(</span><span class="token number">2000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="插入示例数据" tabindex="-1"><a class="header-anchor" href="#插入示例数据" aria-hidden="true">#</a> 插入示例数据</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> range_list <span class="token keyword">SELECT</span> <span class="token function">round</span><span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-01-01&#39;</span> <span class="token keyword">FROM</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> range_list <span class="token keyword">SELECT</span> <span class="token function">round</span><span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-01-01&#39;</span> <span class="token keyword">FROM</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> range_list <span class="token keyword">SELECT</span> <span class="token function">round</span><span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-01&#39;</span> <span class="token keyword">FROM</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> range_list <span class="token keyword">SELECT</span> <span class="token function">round</span><span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-01&#39;</span> <span class="token keyword">FROM</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="关闭多级分区表并行功能" tabindex="-1"><a class="header-anchor" href="#关闭多级分区表并行功能" aria-hidden="true">#</a> 关闭多级分区表并行功能</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> polar_enable_px <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span>
<span class="token keyword">SET</span> polar_px_optimizer_multilevel_partitioning <span class="token operator">=</span> <span class="token keyword">OFF</span><span class="token punctuation">;</span>
</code></pre></div><p>此时，虽然可以进行多级分区表的静态裁剪（只会扫描 <code>range_list_2000_2010_1_10</code> 这张分区表），但是并不能使用并行查询功能：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> range_list <span class="token keyword">WHERE</span> a <span class="token operator">&lt;</span> <span class="token number">1000000</span> <span class="token operator">AND</span> b <span class="token operator">&lt;</span> <span class="token string">&#39;2009-01-01 00:00:00&#39;</span><span class="token punctuation">;</span>
                                          QUERY <span class="token keyword">PLAN</span>
<span class="token comment">----------------------------------------------------------------------------------------------</span>
 Append  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.26</span><span class="token number">.18</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">116</span> width<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
   <span class="token operator">-</span><span class="token operator">&gt;</span>  Seq Scan <span class="token keyword">on</span> range_list_2000_2010_1_10  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.25</span><span class="token number">.60</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">116</span> width<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
         Filter: <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token string">&#39;2009-01-01 00:00:00&#39;</span>::<span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">rows</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="开启多级分区表并行功能" tabindex="-1"><a class="header-anchor" href="#开启多级分区表并行功能" aria-hidden="true">#</a> 开启多级分区表并行功能</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> polar_enable_px <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span>
<span class="token keyword">SET</span> polar_px_optimizer_multilevel_partitioning <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span>
</code></pre></div><p>此时，可以进行多级分区表的静态裁剪（只会扫描 <code>range_list_2000_2010_1_10</code> 这张分区表），同时也可以使用并行查询功能（6 个并行度）：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> range_list <span class="token keyword">WHERE</span> a <span class="token operator">&lt;</span> <span class="token number">1000000</span> <span class="token operator">AND</span> b <span class="token operator">&lt;</span> <span class="token string">&#39;2009-01-01 00:00:00&#39;</span><span class="token punctuation">;</span>
                                             QUERY <span class="token keyword">PLAN</span>
<span class="token comment">----------------------------------------------------------------------------------------------------</span>
 PX Coordinator <span class="token number">6</span>:<span class="token number">1</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.431</span><span class="token number">.00</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">1</span> width<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">)</span>
   <span class="token operator">-</span><span class="token operator">&gt;</span>  Append  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.431</span><span class="token number">.00</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">1</span> width<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">)</span>
         <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> range_list_2000_2010_1_10  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.431</span><span class="token number">.00</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">1</span> width<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">)</span>
               Filter: <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token string">&#39;2009-01-01 00:00:00&#39;</span>::<span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">)</span><span class="token punctuation">)</span>
 Optimizer: PolarDB PX Optimizer
<span class="token punctuation">(</span><span class="token number">5</span> <span class="token keyword">rows</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27);function b(o,g){const c=e("Badge"),l=e("ArticleInfo"),p=e("router-link");return k(),u("div",null,[w,s(c,{type:"tip",text:"V11 / v1.1.17-",vertical:"top"}),s(l,{frontmatter:o.$frontmatter},null,8,["frontmatter"]),n("nav",_,[n("ul",null,[n("li",null,[s(p,{to:"#背景"},{default:t(()=>[a("背景")]),_:1})]),n("li",null,[s(p,{to:"#术语"},{default:t(()=>[a("术语")]),_:1})]),n("li",null,[s(p,{to:"#原理"},{default:t(()=>[a("原理")]),_:1})]),n("li",null,[s(p,{to:"#使用指南"},{default:t(()=>[a("使用指南")]),_:1}),n("ul",null,[n("li",null,[s(p,{to:"#guc-参数"},{default:t(()=>[a("GUC 参数")]),_:1})]),n("li",null,[s(p,{to:"#创建多级分区表"},{default:t(()=>[a("创建多级分区表")]),_:1})]),n("li",null,[s(p,{to:"#插入示例数据"},{default:t(()=>[a("插入示例数据")]),_:1})]),n("li",null,[s(p,{to:"#关闭多级分区表并行功能"},{default:t(()=>[a("关闭多级分区表并行功能")]),_:1})]),n("li",null,[s(p,{to:"#开启多级分区表并行功能"},{default:t(()=>[a("开启多级分区表并行功能")]),_:1})])])])])]),y])}const E=r(m,[["render",b],["__file","multi-level-partition.html.vue"]]);export{E as default};
