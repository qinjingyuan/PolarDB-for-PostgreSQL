import{_ as c,M as t,p as i,q as p,R as a,t as e,N as n,V as r,a1 as l}from"./framework-de73eade.js";const u={},h=l('<h1 id="基于-docker-容器开发" tabindex="-1"><a class="header-anchor" href="#基于-docker-容器开发" aria-hidden="true">#</a> 基于 Docker 容器开发</h1><div class="custom-container danger"><p class="custom-container-title">警告</p><p>为简化使用，容器内的 <code>postgres</code> 用户没有设置密码，仅供体验。如果在生产环境等高安全性需求场合，请务必修改健壮的密码！</p></div><h2 id="在开发机器上下载源代码" tabindex="-1"><a class="header-anchor" href="#在开发机器上下载源代码" aria-hidden="true">#</a> 在开发机器上下载源代码</h2>',3),b={href:"https://github.com/ApsaraDB/PolarDB-for-PostgreSQL",target:"_blank",rel:"noopener noreferrer"},v=a("code",null,"POLARDB_11_STABLE",-1),_={href:"https://gitee.com/mirrors/PolarDB-for-PostgreSQL",target:"_blank",rel:"noopener noreferrer"},m=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[a("span",{class:"token function"},"git"),e(" clone "),a("span",{class:"token parameter variable"},"-b"),e(` POLARDB_11_STABLE https://github.com/ApsaraDB/PolarDB-for-PostgreSQL.git
`)])])],-1),g=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[a("span",{class:"token function"},"git"),e(" clone "),a("span",{class:"token parameter variable"},"-b"),e(` POLARDB_11_STABLE https://gitee.com/mirrors/PolarDB-for-PostgreSQL
`)])])],-1),k=l(`<p>代码克隆完毕后，进入源码目录：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> PolarDB-for-PostgreSQL/
</code></pre></div><h2 id="拉取开发镜像" tabindex="-1"><a class="header-anchor" href="#拉取开发镜像" aria-hidden="true">#</a> 拉取开发镜像</h2>`,3),f={href:"https://hub.docker.com/r/polardb/polardb_pg_devel/tags",target:"_blank",rel:"noopener noreferrer"},x=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 拉取 PolarDB 开发镜像</span>
<span class="token function">docker</span> pull polardb/polardb_pg_devel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建并运行容器" tabindex="-1"><a class="header-anchor" href="#创建并运行容器" aria-hidden="true">#</a> 创建并运行容器</h2><p>此时我们已经在开发机器的源码目录中。从开发镜像上创建一个容器，将当前目录作为一个 volume 挂载到容器中，这样可以：</p><ul><li>在容器内的环境中编译源码</li><li>在容器外（开发机器上）使用编辑器来查看或修改代码</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> <span class="token environment constant">$PWD</span>:/home/postgres/polardb_pg <span class="token punctuation">\\</span>
    --shm-size<span class="token operator">=</span>512m --cap-add<span class="token operator">=</span>SYS_PTRACE <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token punctuation">\\</span>
    <span class="token parameter variable">--name</span> polardb_pg_devel <span class="token punctuation">\\</span>
    polardb/polardb_pg_devel <span class="token punctuation">\\</span>
    <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入容器后，为容器内用户获取源码目录的权限，然后编译部署 PolarDB-PG 实例。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 获取权限并编译部署</span>
<span class="token builtin class-name">cd</span> polardb_pg
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token parameter variable">-R</span> a+wr ./
<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> postgres:postgres ./
./polardb_build.sh

<span class="token comment"># 验证</span>
psql <span class="token parameter variable">-h</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-c</span> <span class="token string">&#39;select version();&#39;</span>
            version
--------------------------------
 PostgreSQL <span class="token number">11.9</span> <span class="token punctuation">(</span>POLARDB <span class="token number">11.9</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">1</span> row<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编译测试选项说明" tabindex="-1"><a class="header-anchor" href="#编译测试选项说明" aria-hidden="true">#</a> 编译测试选项说明</h2><p>以下表格列出了编译、初始化或测试 PolarDB-PG 集群所可能使用到的选项及说明。更多选项及其说明详见源码目录下的 <code>polardb_build.sh</code> 脚本。</p>`,9),P=a("thead",null,[a("tr",null,[a("th",null,"选项"),a("th",null,"描述"),a("th",null,"默认值")])],-1),D=a("tr",null,[a("td",null,[a("code",null,"--withrep")]),a("td",null,"是否初始化只读节点"),a("td",null,[a("code",null,"NO")])],-1),B=a("tr",null,[a("td",null,[a("code",null,"--repnum")]),a("td",null,"只读节点数量"),a("td",null,[a("code",null,"1")])],-1),w=a("tr",null,[a("td",null,[a("code",null,"--withstandby")]),a("td",null,"是否初始化热备份节点"),a("td",null,[a("code",null,"NO")])],-1),A=a("tr",null,[a("td",null,[a("code",null,"--initpx")]),a("td",null,"是否初始化为 HTAP 集群（1 个读写节点，2 个只读节点）"),a("td",null,[a("code",null,"NO")])],-1),L=a("tr",null,[a("td",null,[a("code",null,"--with-pfsd")]),a("td",null,"是否编译 PolarDB File System（PFS）相关功能"),a("td",null,[a("code",null,"NO")])],-1),N=a("td",null,[a("code",null,"--with-tde")],-1),O={href:"https://zhuanlan.zhihu.com/p/84829027",target:"_blank",rel:"noopener noreferrer"},S=a("td",null,[a("code",null,"NO")],-1),G=a("tr",null,[a("td",null,[a("code",null,"--with-dma")]),a("td",null,"是否初始化为 DMA（Data Max Availability）高可用三节点集群"),a("td",null,[a("code",null,"NO")])],-1),T=a("tr",null,[a("td",null,[a("code",null,"-r"),e("/ "),a("code",null,"-t"),e(" / "),a("br"),a("code",null,"--regress")]),a("td",null,"在编译安装完毕后运行内核回归测试"),a("td",null,[a("code",null,"NO")])],-1),E=a("tr",null,[a("td",null,[a("code",null,"-r-px")]),a("td",null,"运行 HTAP 实例的回归测试"),a("td",null,[a("code",null,"NO")])],-1),H=a("tr",null,[a("td",null,[a("code",null,"-e"),e(" /"),a("br"),a("code",null,"--extension")]),a("td",null,"运行扩展插件测试"),a("td",null,[a("code",null,"NO")])],-1),Q=a("tr",null,[a("td",null,[a("code",null,"-r-external")]),a("td",null,[e("测试 "),a("code",null,"external/"),e(" 下的扩展插件")]),a("td",null,[a("code",null,"NO")])],-1),R=a("tr",null,[a("td",null,[a("code",null,"-r-contrib")]),a("td",null,[e("测试 "),a("code",null,"contrib/"),e(" 下的扩展插件")]),a("td",null,[a("code",null,"NO")])],-1),C=a("tr",null,[a("td",null,[a("code",null,"-r-pl")]),a("td",null,[e("测试 "),a("code",null,"src/pl/"),e(" 下的扩展插件")]),a("td",null,[a("code",null,"NO")])],-1),y=l(`<p>如无定制的需求，则可以按照下面给出的选项编译部署不同形态的 PolarDB-PG 集群并进行测试。</p><h2 id="polardb-pg-各形态编译部署" tabindex="-1"><a class="header-anchor" href="#polardb-pg-各形态编译部署" aria-hidden="true">#</a> PolarDB-PG 各形态编译部署</h2><h3 id="本地单节点实例" tabindex="-1"><a class="header-anchor" href="#本地单节点实例" aria-hidden="true">#</a> 本地单节点实例</h3><ul><li>1 个读写节点（运行于 <code>5432</code> 端口）</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>./polardb_build.sh
</code></pre></div><h3 id="本地多节点实例" tabindex="-1"><a class="header-anchor" href="#本地多节点实例" aria-hidden="true">#</a> 本地多节点实例</h3><ul><li>1 个读写节点（运行于 <code>5432</code> 端口）</li><li>1 个只读节点（运行于 <code>5433</code> 端口）</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>./polardb_build.sh <span class="token parameter variable">--withrep</span> <span class="token parameter variable">--repnum</span><span class="token operator">=</span><span class="token number">1</span>
</code></pre></div><h3 id="本地多节点带备库实例" tabindex="-1"><a class="header-anchor" href="#本地多节点带备库实例" aria-hidden="true">#</a> 本地多节点带备库实例</h3><ul><li>1 个读写节点（运行于 <code>5432</code> 端口）</li><li>1 个只读节点（运行于 <code>5433</code> 端口）</li><li>1 个备库节点（运行于 <code>5434</code> 端口）</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>./polardb_build.sh <span class="token parameter variable">--withrep</span> <span class="token parameter variable">--repnum</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--withstandby</span>
</code></pre></div><h3 id="本地多节点-htap-实例" tabindex="-1"><a class="header-anchor" href="#本地多节点-htap-实例" aria-hidden="true">#</a> 本地多节点 HTAP 实例</h3><ul><li>1 个读写节点（运行于 <code>5432</code> 端口）</li><li>2 个只读节点（运行于 <code>5433</code> / <code>5434</code> 端口）</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>./polardb_build.sh <span class="token parameter variable">--initpx</span>
</code></pre></div><h2 id="实例回归测试" tabindex="-1"><a class="header-anchor" href="#实例回归测试" aria-hidden="true">#</a> 实例回归测试</h2><p>普通实例回归测试：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>./polardb_build.sh <span class="token parameter variable">--withrep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-e</span> -r-external -r-contrib -r-pl --with-tde
</code></pre></div><p>HTAP 实例回归测试：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>./polardb_build.sh -r-px <span class="token parameter variable">-e</span> -r-external -r-contrib -r-pl --with-tde
</code></pre></div><p>DMA 实例回归测试：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>./polardb_build.sh <span class="token parameter variable">-r</span> <span class="token parameter variable">-e</span> -r-external -r-contrib -r-pl --with-tde --with-dma
</code></pre></div>`,21);function V(I,M){const s=t("ExternalLinkIcon"),o=t("CodeGroupItem"),d=t("CodeGroup");return i(),p("div",null,[h,a("p",null,[e("从 "),a("a",b,[e("GitHub"),n(s)]),e(" 上下载 PolarDB for PostgreSQL 的源代码，稳定分支为 "),v,e("。如果因网络原因不能稳定访问 GitHub，则可以访问 "),a("a",_,[e("Gitee 国内镜像"),n(s)]),e("。")]),n(d,null,{default:r(()=>[n(o,{title:"GitHub"},{default:r(()=>[m]),_:1}),n(o,{title:"Gitee 国内镜像"},{default:r(()=>[g]),_:1})]),_:1}),k,a("p",null,[e("从 DockerHub 上拉取 PolarDB for PostgreSQL 的 "),a("a",f,[e("开发镜像"),n(s)]),e("。")]),x,a("table",null,[P,a("tbody",null,[D,B,w,A,L,a("tr",null,[N,a("td",null,[e("是否初始化 "),a("a",O,[e("透明数据加密（TDE）"),n(s)]),e(" 功能")]),S]),G,T,E,H,Q,R,C])]),y])}const q=c(u,[["render",V],["__file","dev-on-docker.html.vue"]]);export{q as default};
