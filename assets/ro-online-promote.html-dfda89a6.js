import{_ as l,M as t,p as c,q as d,N as e,R as a,V as o,t as s,a1 as i}from"./framework-de73eade.js";const u={},k=a("h1",{id:"只读节点在线-promote",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#只读节点在线-promote","aria-hidden":"true"},"#"),s(" 只读节点在线 Promote")],-1),h=a("p",null,[s("PolarDB for PostgreSQL 是一款存储与计算分离的云原生数据库，所有计算节点共享一份存储，并且对存储的访问具有 "),a("strong",null,"一写多读"),s(" 的限制：所有计算节点可以对存储进行读取，但只有一个计算节点可以对存储进行写入。这种限制会带来一个问题：当读写节点因为宕机或网络故障而不可用时，集群中将没有能够可以写入存储的计算节点，应用业务中的增、删、改，以及 DDL 都将无法运行。")],-1),_=a("p",null,"本文将指导您在 PolarDB for PostgreSQL 计算集群中的读写节点停止服务时，将任意一个只读节点在线提升为读写节点，从而使集群恢复对于共享存储的写入能力。",-1),g={class:"table-of-contents"},m=i(`<h2 id="前置准备" tabindex="-1"><a class="header-anchor" href="#前置准备" aria-hidden="true">#</a> 前置准备</h2><p>为方便起见，本示例使用基于本地磁盘的实例来进行演示。拉取如下镜像并启动容器，可以得到一个基于本地磁盘的 HTAP 实例：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull polardb/polardb_pg_local_instance:htap
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token punctuation">\\</span>
    --cap-add<span class="token operator">=</span>SYS_PTRACE <span class="token punctuation">\\</span>
    <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token punctuation">\\</span>
    <span class="token parameter variable">--name</span> polardb_pg_htap <span class="token punctuation">\\</span>
    --shm-size<span class="token operator">=</span>512m <span class="token punctuation">\\</span>
    polardb/polardb_pg_local_instance:htap <span class="token punctuation">\\</span>
    <span class="token function">bash</span>
</code></pre></div><p>容器内的 <code>5432</code> 至 <code>5434</code> 端口分别运行着一个读写节点和两个只读节点。两个只读节点与读写节点共享同一份数据，并通过物理复制保持与读写节点的内存状态同步。</p><h2 id="验证只读节点不可写" tabindex="-1"><a class="header-anchor" href="#验证只读节点不可写" aria-hidden="true">#</a> 验证只读节点不可写</h2><p>首先，连接到读写节点，创建一张表并插入一些数据：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>psql <span class="token parameter variable">-p5432</span>
</code></pre></div><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>postgres<span class="token operator">=</span><span class="token comment"># CREATE TABLE t (id int);</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span>
postgres<span class="token operator">=</span><span class="token comment"># INSERT INTO t SELECT generate_series(1,10);</span>
<span class="token keyword">INSERT</span> <span class="token number">0</span> <span class="token number">10</span>
</code></pre></div><p>然后连接到只读节点，并同样试图对表插入数据，将会发现无法进行插入操作：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>psql <span class="token parameter variable">-p5433</span>
</code></pre></div><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>postgres<span class="token operator">=</span><span class="token comment"># INSERT INTO t SELECT generate_series(1,10);</span>
ERROR:  cannot <span class="token keyword">execute</span> <span class="token keyword">INSERT</span> <span class="token operator">in</span> a <span class="token keyword">read</span><span class="token operator">-</span>only <span class="token keyword">transaction</span>
</code></pre></div><h2 id="读写节点停止写入" tabindex="-1"><a class="header-anchor" href="#读写节点停止写入" aria-hidden="true">#</a> 读写节点停止写入</h2><p>此时，关闭读写节点，模拟出读写节点不可用的行为：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ pg_ctl <span class="token parameter variable">-D</span> ~/tmp_master_dir_polardb_pg_1100_bld/ stop
waiting <span class="token keyword">for</span> server to shut down<span class="token punctuation">..</span><span class="token punctuation">..</span> <span class="token keyword">done</span>
server stopped
</code></pre></div><p>此时，集群中没有任何节点可以写入存储了。这时，我们需要将一个只读节点提升为读写节点，恢复对存储的写入。</p><h2 id="只读节点-promote" tabindex="-1"><a class="header-anchor" href="#只读节点-promote" aria-hidden="true">#</a> 只读节点 Promote</h2><p>只有当读写节点停止写入后，才可以将只读节点提升为读写节点，否则将会出现集群内两个节点同时写入的情况。当数据库检测到出现多节点写入时，将会导致运行异常。</p><p>将运行在 <code>5433</code> 端口的只读节点提升为读写节点：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ pg_ctl <span class="token parameter variable">-D</span> ~/tmp_replica_dir_polardb_pg_1100_bld1/ promote
waiting <span class="token keyword">for</span> server to promote<span class="token punctuation">..</span><span class="token punctuation">..</span> <span class="token keyword">done</span>
server promoted
</code></pre></div><h2 id="计算集群恢复写入" tabindex="-1"><a class="header-anchor" href="#计算集群恢复写入" aria-hidden="true">#</a> 计算集群恢复写入</h2><p>连接到已经完成 promote 的新读写节点上，再次尝试之前的 <code>INSERT</code> 操作：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>postgres<span class="token operator">=</span><span class="token comment"># INSERT INTO t SELECT generate_series(1,10);</span>
<span class="token keyword">INSERT</span> <span class="token number">0</span> <span class="token number">10</span>
</code></pre></div><p>从上述结果中可以看到，新的读写节点能够成功对存储进行写入。这说明原先的只读节点已经被成功提升为读写节点了。</p>`,23);function b(p,v){const r=t("ArticleInfo"),n=t("router-link");return c(),d("div",null,[k,e(r,{frontmatter:p.$frontmatter},null,8,["frontmatter"]),h,_,a("nav",g,[a("ul",null,[a("li",null,[e(n,{to:"#前置准备"},{default:o(()=>[s("前置准备")]),_:1})]),a("li",null,[e(n,{to:"#验证只读节点不可写"},{default:o(()=>[s("验证只读节点不可写")]),_:1})]),a("li",null,[e(n,{to:"#读写节点停止写入"},{default:o(()=>[s("读写节点停止写入")]),_:1})]),a("li",null,[e(n,{to:"#只读节点-promote"},{default:o(()=>[s("只读节点 Promote")]),_:1})]),a("li",null,[e(n,{to:"#计算集群恢复写入"},{default:o(()=>[s("计算集群恢复写入")]),_:1})])])]),m])}const E=l(u,[["render",b],["__file","ro-online-promote.html.vue"]]);export{E as default};
