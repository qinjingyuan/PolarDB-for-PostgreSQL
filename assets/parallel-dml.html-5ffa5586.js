import{_ as i,M as p,p as u,q as r,N as a,R as n,V as t,t as s,a1 as d}from"./framework-de73eade.js";const k="/PolarDB-for-PostgreSQL/assets/parallel_insert_architecture-875aa47e.png",_="/PolarDB-for-PostgreSQL/assets/parallel_data_flow-94a4a827.png",m="/PolarDB-for-PostgreSQL/assets/parallel_dml_update_dataflow-c9f33636.png",v="/PolarDB-for-PostgreSQL/assets/parallel_dml_delete_dataflow-7abf3149.png",b="/PolarDB-for-PostgreSQL/assets/parallel_dml_insert_result_1-68780002.png",P="/PolarDB-for-PostgreSQL/assets/parallel_dml_insert_result_read-027728ea.png",h="/PolarDB-for-PostgreSQL/assets/parallel_dml_update_result-f7257874.png",g="/PolarDB-for-PostgreSQL/assets/parallel_dml_update_read_result-7795fe26.png",w={},y=n("h1",{id:"并行-dml",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#并行-dml","aria-hidden":"true"},"#"),s(" 并行 DML")],-1),D={class:"table-of-contents"},S=d('<h2 id="背景介绍" tabindex="-1"><a class="header-anchor" href="#背景介绍" aria-hidden="true">#</a> 背景介绍</h2><p>PolarDB for PostgreSQL 提供了一款强大的分析型查询引擎——PX（Parallel eXecution），通过利用集群中多个只读节点来提升查询性能。同时，PX 针对 DML（<code>INSERT</code> / <code>UPDATE</code> / <code>DELETE</code>）也可以做到并行读并行写的加速。其中：</p><ul><li><strong>并行读</strong> 是指借助多个只读节点上的多进程来加速 DML 中的查找操作</li><li><strong>并行写</strong> 是指在一个 PolarDB 唯一的读写节点上利用多进程实现并行写入</li></ul><h2 id="术语" tabindex="-1"><a class="header-anchor" href="#术语" aria-hidden="true">#</a> 术语</h2><ul><li>QC：Query Coordinator，发起 PX 并行查询的进程角色。</li><li>PX Worker：参与 PX 跨节点并行查询的工作进程角色。</li><li>DML：数据操作语句，包含 <code>INSERT</code> / <code>UPDATE</code> / <code>DELETE</code>。</li><li>Slice：指每个 PX Worker 负责执行的计划分片。</li><li>RW / RO：读写节点 / 只读节点。</li></ul><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍" aria-hidden="true">#</a> 功能介绍</h2><h3 id="parallel-insert" tabindex="-1"><a class="header-anchor" href="#parallel-insert" aria-hidden="true">#</a> Parallel Insert</h3><p>为了加速 <code>INSERT ... SELECT ...</code> 这种既有读取又有写入的 DML SQL，PolarDB for PG 使用 Parallel Insert 来提升性能。对于 <code>SELECT</code> 子查询，PolarDB 使用多个 PX Worker 并行加速查询；对于 <code>INSERT</code> 的写入操作，由于 PolarDB 只有一个 RW 节点，我们会在 RW 节点上启动多个执行写入的 PX Worker 进程，通过 <strong>Motion 算子</strong> 来接收 RO 节点上读取的数据，实现加速并行写入。</p><p>这里需要注意的是，RO 节点上的 PX Worker 只能执行只读操作，但是在 RW 节点上的 PX Worker 可以执行写入操作。Parallel Insert 在读写数据量均衡的情况下，最高能提升 3 倍的性能。Parallel Insert 已支持：</p><ul><li>普通表</li><li>分区表</li><li>强制有序</li><li>并行度动态调整</li></ul><h3 id="parallel-update" tabindex="-1"><a class="header-anchor" href="#parallel-update" aria-hidden="true">#</a> Parallel Update</h3><p>与 Parallel Insert 类似，针对 <code>UPDATE ... SET ...</code>，PolarDB 使用多个 PX Worker 来执行并行查询，实现加速筛选需要更新的行；同时，在 RW 节点上启动多个 PX Worker 进程来执行更新操作。在读写数据量均衡的情况下，最高能提升 3 倍的性能。Parallel Update 不支持分区表，支持并行度动态调整。</p><h3 id="parallel-delete" tabindex="-1"><a class="header-anchor" href="#parallel-delete" aria-hidden="true">#</a> Parallel Delete</h3><p>与 Parallel Update 基本相同，针对 <code>DELETE FROM ...</code>，PolarDB 通过多个 PX Worker 来执行并行查询，实现加速筛选需要删除的行；同时，在 RW 节点启动多个 PX Worker 来执行删除操作。Parallel Delete 不支持分区表，支持并行度动态调整。</p><h2 id="功能设计" tabindex="-1"><a class="header-anchor" href="#功能设计" aria-hidden="true">#</a> 功能设计</h2><h3 id="parallel-insert-1" tabindex="-1"><a class="header-anchor" href="#parallel-insert-1" aria-hidden="true">#</a> Parallel Insert</h3><p>Parallel Insert 的总体框架如下所示：</p><p><img src="'+k+`" alt="parallel_insert_arch"></p><p>Parallel Insert 的处理步骤如下：</p><ol><li>QC 进程接收到 <code>INSERT ... SEELCT</code></li><li>QC 进程对 SQL 进行解析、重写，生成查询树，通过 PX 优化器生成计划树</li><li>通过 bitmap 标志来指定每个 PX Worker 负责执行哪部分执行计划</li><li>将完整的计划树分发到 RO 节点和 RW 节点，并创建 PX Worker 进程，不同的 PX Workers 根据自己的 ID 在 bitmap 中查找自己负责执行的计划</li><li>RO 节点上的 PX Workers 执行查询计划，从存储中并行读取各自负责的数据分片；</li><li>RO 节点上的 PX Workers 通过 Motion 算子将查询数据发送给 RW 节点上的 PX Workers；</li><li>RW 节点上的 PX Workers 并行向存储写入数据。</li></ol><p>其中 5、6、7 三个步骤是全流水线执行的。</p><p>下面以最简单的并行 DML <code>INSERT INTO t1 SELECT * FROM t2</code> 为例。表 <code>t1</code> 和 <code>t2</code> 都是只有两列的表。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>                   QUERY <span class="token keyword">PLAN</span>
<span class="token comment">-------------------------------------------------</span>
 <span class="token keyword">Insert</span> <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t1
   <span class="token operator">-</span><span class="token operator">&gt;</span>  Result
         Output: t2<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>c2
         <span class="token operator">-</span><span class="token operator">&gt;</span>  PX <span class="token keyword">Hash</span> <span class="token number">6</span>:<span class="token number">6</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span>
               Output: t2<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t2
                     Output: t2<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> <span class="token number">1</span>
 Optimizer: PolarDB PX Optimizer
<span class="token punctuation">(</span><span class="token number">8</span> <span class="token keyword">rows</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在执行计划中，<code>Partial Seq Scan</code> 代表每个 PX Workers 并行读取的数据分片，<code>PX Hash 6:6</code> 说明有 6 个负责读取的 PX Workers 和 6 个负责写入的 PX Workers。计划中的 <code>Hash</code> 代表负责读取的 PX Worker 所读取到的数据会 hash 重分布到 RW 节点上负责写入的 PX Worker 上。</p><p>Parallel Insert 也支持单个写 Worker，多个读 Worker 的执行计划：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>                      QUERY <span class="token keyword">PLAN</span>
<span class="token comment">-------------------------------------------------------</span>
 <span class="token keyword">Insert</span> <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t1
   <span class="token operator">-</span><span class="token operator">&gt;</span>  Result
         Output: t2<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>c2
         <span class="token operator">-</span><span class="token operator">&gt;</span>  PX Coordinator <span class="token number">6</span>:<span class="token number">1</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span>
               Output: t2<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>c2
               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t2
                     Output: t2<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>c2
 Optimizer: PolarDB PX Optimizer
<span class="token punctuation">(</span><span class="token number">8</span> <span class="token keyword">rows</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于只有一个写 Worker，所以计划中显示的是 <code>PX Coordinator 6:1</code>，将 RO 节点上的数据汇聚到 RW 节点上。</p><p>下图是以数据流的方式展示 Parallel Insert 的执行过程：</p><p><img src="`+_+`" alt="parallel_insert_data_flow"></p><p>执行过程如下：</p><ol><li>每个负责读取的 PX Worker 执行一部分的顺序扫描操作，读取数据，进入到 <code>RedistributeMotionRandom</code>，将读取到的每条数据重分布，发送给各个负责写入的 PX Worker；</li><li>通过 <code>SendMotion</code> 来向 RW 节点上的 PX Worker 发送数据，RO 节点上的每个 PX Worker 会从所有 RW 节点上的 PX Worker 中选择一个进行数据重分布，重分布的策略有哈希分布和随机分布两种；</li><li>RW 节点上被选中的 PX Worker 通过 <code>RecvMotion</code> 来接收数据，然后将数据通过 <code>ModifyTable</code> 算子写入存储。</li></ol><h3 id="parallel-update-1" tabindex="-1"><a class="header-anchor" href="#parallel-update-1" aria-hidden="true">#</a> Parallel Update</h3><p>由于 Parallel Update 和 Delete 在 SQL 解析、重写的过程和 Parallel Insert 相同，下面只说明 Parallel Update 的执行计划和数据流动方式。</p><p>不带子查询的并行 Update 计划：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>                                               QUERY <span class="token keyword">PLAN</span>
<span class="token comment">--------------------------------------------------------------------------------------------------------</span>
 <span class="token keyword">Update</span> <span class="token punctuation">(</span>segment: <span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t1
   <span class="token operator">-</span><span class="token operator">&gt;</span>  Result
         Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> <span class="token punctuation">(</span>DMLAction<span class="token punctuation">)</span><span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid
         <span class="token operator">-</span><span class="token operator">&gt;</span>  PX <span class="token keyword">Hash</span> <span class="token number">6</span>:<span class="token number">6</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span>
               Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id<span class="token punctuation">,</span> <span class="token punctuation">(</span>DMLAction<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;16397&#39;</span>::oid<span class="token punctuation">)</span>
               <span class="token operator">-</span><span class="token operator">&gt;</span>  Result
                     Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id<span class="token punctuation">,</span> <span class="token punctuation">(</span>DMLAction<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;16397&#39;</span>::oid
                     <span class="token operator">-</span><span class="token operator">&gt;</span>  Split
                           Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id<span class="token punctuation">,</span> DMLAction
                           <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t1 t1_1
                                 Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id
 Optimizer: PolarDB PX Optimizer
<span class="token punctuation">(</span><span class="token number">12</span> <span class="token keyword">rows</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从执行计划中可以看出，从 RO 节点读取数据到 RW 节点写入数据之前存在一个 Split 算子。算子中还包含了一个 <code>DMLAction</code> 的标志，用于表示当前正在进行的 DML 操作类型（<code>DML_INSERT</code> / <code>DML_DELETE</code>）。Split 算子用于把 <code>UPDATE</code> 拆分为 <code>DELETE</code> 和 <code>INSERT</code> 两个阶段，表明要删除哪些行、插入哪些行。</p><p>对于带有子查询的 <code>UPDATE</code> 计划，除写入计划分片之外加入了自查询的执行计划分片。示例如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>                                                 QUERY <span class="token keyword">PLAN</span>
<span class="token comment">------------------------------------------------------------------------------------------------------------</span>
 <span class="token keyword">Update</span> <span class="token punctuation">(</span>segment: <span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t1
   <span class="token operator">-</span><span class="token operator">&gt;</span>  Result
         Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> <span class="token punctuation">(</span>DMLAction<span class="token punctuation">)</span><span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid
         <span class="token operator">-</span><span class="token operator">&gt;</span>  PX <span class="token keyword">Hash</span> <span class="token number">6</span>:<span class="token number">6</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span>
               Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id<span class="token punctuation">,</span> <span class="token punctuation">(</span>DMLAction<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;16397&#39;</span>::oid<span class="token punctuation">)</span>
               <span class="token operator">-</span><span class="token operator">&gt;</span>  Result
                     Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id<span class="token punctuation">,</span> <span class="token punctuation">(</span>DMLAction<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;16397&#39;</span>::oid
                     <span class="token operator">-</span><span class="token operator">&gt;</span>  Split
                           Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id<span class="token punctuation">,</span> DMLAction
                           <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t1 t1_1
                                 Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> int4<span class="token punctuation">(</span><span class="token punctuation">(</span>SubPlan <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id
                                 SubPlan <span class="token number">1</span>
                                   <span class="token operator">-</span><span class="token operator">&gt;</span>  Materialize
                                         Output: <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                         <span class="token operator">-</span><span class="token operator">&gt;</span>  PX Broadcast <span class="token number">1</span>:<span class="token number">6</span>  <span class="token punctuation">(</span>slice2<span class="token punctuation">)</span>
                                               Output: <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                               <span class="token operator">-</span><span class="token operator">&gt;</span>  Aggregate
                                                     Output: <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                     <span class="token operator">-</span><span class="token operator">&gt;</span>  PX Coordinator <span class="token number">6</span>:<span class="token number">1</span>  <span class="token punctuation">(</span>slice3<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span>
                                                           <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t2
 Optimizer: PolarDB PX Optimizer
<span class="token punctuation">(</span><span class="token number">21</span> <span class="token keyword">rows</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Parallel Update 处理数据流图如下图所示：</p><p><img src="`+m+`" alt="parallel_update_dataflow"></p><ul><li>对于不带子查询的情况，如 <code>UPDATE t1 SET c1=3</code><ol><li>每个负责写入的 PX Worker 并行查找要更新的行</li><li>通过 Split 算子，拆分成 <code>DELETE</code> 和 <code>INSERT</code> 操作</li><li>执行 <code>ExecDelete</code> 和 <code>ExecInsert</code></li></ol></li><li>带子查询的情况，如 <code>UPDATE t1 SET c1=(SELECT COUNT(*) FROM t2)</code><ol><li>每个负责读取的 PX Worker 从共享存储上并行读取自己负责的数据分片，然后通过 <code>SendMotion</code> 将自己读到的数据汇聚到 QC 进程</li><li>QC 进程将数据（过滤条件）广播给 RW 节点上的各个负责写入的 PX Worker</li><li>各个负责写入的 PX Worker 分别扫描各自负责的数据分片，查找待更新的数据</li><li>通过 Split 算子，拆分成 <code>DELETE</code> 和 <code>INSERT</code> 操作</li><li>执行 <code>ExecDelete</code> 和 <code>ExecInsert</code></li></ol></li></ul><h3 id="parallel-delete-1" tabindex="-1"><a class="header-anchor" href="#parallel-delete-1" aria-hidden="true">#</a> Parallel Delete</h3><p>不带子查询的并行 Delete 计划：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>                                   QUERY <span class="token keyword">PLAN</span>
<span class="token comment">--------------------------------------------------------------------------------</span>
 <span class="token keyword">Delete</span> <span class="token punctuation">(</span>segment: <span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t1
   <span class="token operator">-</span><span class="token operator">&gt;</span>  Result
         Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid
         <span class="token operator">-</span><span class="token operator">&gt;</span>  PX <span class="token keyword">Hash</span> <span class="token number">6</span>:<span class="token number">6</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span>
               Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t1 t1_1
                     Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id<span class="token punctuation">,</span> <span class="token number">0</span>
                     Filter: <span class="token punctuation">(</span>t1_1<span class="token punctuation">.</span>c1 <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
 Optimizer: PolarDB PX Optimizer
<span class="token punctuation">(</span><span class="token number">9</span> <span class="token keyword">rows</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>带有子查询的并行 Delete 计划：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>                                    QUERY <span class="token keyword">PLAN</span>
<span class="token comment">-----------------------------------------------------------------------------------</span>
 <span class="token keyword">Delete</span> <span class="token punctuation">(</span>segment: <span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t1
   <span class="token operator">-</span><span class="token operator">&gt;</span>  Result
         Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid
         <span class="token operator">-</span><span class="token operator">&gt;</span>  PX <span class="token keyword">Hash</span> <span class="token number">6</span>:<span class="token number">6</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span>
               Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Hash</span> Semi <span class="token keyword">Join</span>
                     Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id<span class="token punctuation">,</span> <span class="token number">0</span>
                     <span class="token keyword">Hash</span> Cond: <span class="token punctuation">(</span>t1_1<span class="token punctuation">.</span>c1 <span class="token operator">=</span> t2<span class="token punctuation">.</span>c1<span class="token punctuation">)</span>
                     <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t1 t1_1
                           Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id
                     <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Hash</span>
                           Output: t2<span class="token punctuation">.</span>c1
                           <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Full</span> Seq Scan <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t2
                                 Output: t2<span class="token punctuation">.</span>c1
 Optimizer: PolarDB PX Optimizer
<span class="token punctuation">(</span><span class="token number">15</span> <span class="token keyword">rows</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>负责读写的 PX Workers 数量：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>                                    QUERY <span class="token keyword">PLAN</span>
<span class="token comment">-----------------------------------------------------------------------------------</span>
 <span class="token keyword">Delete</span> <span class="token punctuation">(</span>segment: <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t1
   <span class="token operator">-</span><span class="token operator">&gt;</span>  Result
         Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid
         <span class="token operator">-</span><span class="token operator">&gt;</span>  PX <span class="token keyword">Hash</span> <span class="token number">6</span>:<span class="token number">10</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span>
               Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Hash</span> Semi <span class="token keyword">Join</span>
                     Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id<span class="token punctuation">,</span> <span class="token number">0</span>
                     <span class="token keyword">Hash</span> Cond: <span class="token punctuation">(</span>t1_1<span class="token punctuation">.</span>c1 <span class="token operator">=</span> t2<span class="token punctuation">.</span>c1<span class="token punctuation">)</span>
                     <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t1 t1_1
                           Output: t1_1<span class="token punctuation">.</span>c1<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>c2<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>ctid<span class="token punctuation">,</span> t1_1<span class="token punctuation">.</span>_px_worker_id
                     <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Hash</span>
                           Output: t2<span class="token punctuation">.</span>c1
                           <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Full</span> Seq Scan <span class="token keyword">on</span> <span class="token keyword">public</span><span class="token punctuation">.</span>t2
                                 Output: t2<span class="token punctuation">.</span>c1
 Optimizer: PolarDB PX Optimizer
<span class="token punctuation">(</span><span class="token number">15</span> <span class="token keyword">rows</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 Parallel Delete 的计划与 Parallel Update 类似，区别在于：</p><ol><li>由于 Parallel Delete 只执行删除操作，不执行插入操作，所以不需要 Split 算子</li><li>顶层的 DML 算子由 Update 变为 Delete 算子</li></ol><p>并行 Delete 的数据流图如下所示：</p><p><img src="`+v+`" alt="parallel_dml_delete_dataflow"></p><ol><li>每个负责读取的 PX Workers 扫描属于自己的数据分片，找出要删除的行</li><li>将待删除的行通过 Motion 算子传输给每个负责写入的 PX Workers，并行执行 Delete 操作</li></ol><h2 id="使用说明" tabindex="-1"><a class="header-anchor" href="#使用说明" aria-hidden="true">#</a> 使用说明</h2><h3 id="parallel-insert-2" tabindex="-1"><a class="header-anchor" href="#parallel-insert-2" aria-hidden="true">#</a> Parallel Insert</h3><p>Parallel Insert 默认关闭，需要打开开关来使用：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 使用 Parallel Insert 前，需要打开 PX</span>
<span class="token keyword">SET</span> polar_enable_px <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span>

<span class="token comment">-- 开启 Parallel Insert 功能</span>
<span class="token keyword">SET</span> polar_px_enable_insert_select <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span>

<span class="token comment">-- 开启 Parallel Insert 写入分区表，默认关闭</span>
<span class="token keyword">SET</span> polar_px_enable_insert_partition_table <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span>

<span class="token comment">-- 写入并行度控制，默认为 6，表示 RW 节点上会启动 6 个 PX Workers 来执行写入</span>
<span class="token keyword">SET</span> polar_px_insert_dop_num <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>

<span class="token comment">-- 支持无表查询的开关，默认关闭</span>
<span class="token keyword">SET</span> polar_px_enable_insert_from_tableless <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span>
</code></pre></div><p>由于 Parallel Insert 无法保证写入顺序，提供以下开关以强制保证写入结果有序：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 默认打开，关闭后则不保证并行 Insert 结果有序</span>
<span class="token keyword">SET</span> polar_px_enable_insert_order_sensitive <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="parallel-update-2" tabindex="-1"><a class="header-anchor" href="#parallel-update-2" aria-hidden="true">#</a> Parallel Update</h3><p>参数 <code>polar_px_enable_update</code> 控制是否开启 Parallel Update 功能，默认关闭。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> polar_px_enable_update <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span>
</code></pre></div><p>参数 <code>polar_px_update_dop_num</code> 控制 Parallel Update 的写入并行度。默认为 <code>6</code>，范围为 <code>1~128</code>。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 启动 6 个 PX Workers 进行写入</span>
<span class="token keyword">SET</span> polar_px_update_dop_num <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="parallel-delete-2" tabindex="-1"><a class="header-anchor" href="#parallel-delete-2" aria-hidden="true">#</a> Parallel Delete</h3><p>参数 <code>polar_px_enable_delete</code> 控制是否开启 Parallel Delete，默认关闭。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> polar_px_enable_delete <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span>
</code></pre></div><p>参数 <code>polar_px_delete_dop_num</code> 控制 Parallel Delete 的写入并行度。默认值为 <code>6</code>，取值范围为 <code>1~128</code>。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 启动 6 个 PX Workers 进行删除</span>
<span class="token keyword">SET</span> polar_px_delete_dop_num <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="性能表现" tabindex="-1"><a class="header-anchor" href="#性能表现" aria-hidden="true">#</a> 性能表现</h2><p>下面将简单说明一下 PDML 的性能表现。</p><h3 id="parallel-insert-3" tabindex="-1"><a class="header-anchor" href="#parallel-insert-3" aria-hidden="true">#</a> Parallel Insert</h3><p>在读写数据量相同的情况下，总数据量为 75GB 时，Parallel Insert 的性能表现如下图所示：</p><p><img src="`+b+'" alt="parallel_dml_insert_result_equal"></p><p>当读数据量远大于写数据量的情况下，总数据量为 75GB 时，写入数据量占读数据量的 0.25% 时，Parallel Insert 的性能表现如下图所示：</p><p><img src="'+P+'" alt="parallel_dml_insert_result_"></p><p>由两张图可知：</p><ol><li>在读写数据量相同的情况下，Parallel Insert 最高能提升 3 倍的性能</li><li>读数据量越大，Parallel Insert 性能提升幅度越大，最高能有 4 倍左右的提升</li><li>提升写入并行度对性能提升不大，主要原因是 PX Worker 必须在 RW 上执行并行写入，数据库中的表扩展锁成为性能瓶颈</li></ol><h3 id="parallel-update-3" tabindex="-1"><a class="header-anchor" href="#parallel-update-3" aria-hidden="true">#</a> Parallel Update</h3><p>在读写数据量相同的情况下，总数据量为 75GB 时，并行 Update 的性能表现：</p><p><img src="'+h+'" alt="parallel_dml_update_result"></p><p>在读数据量远大于写数据量的情况下，读写数据比例为 100:1 时，并行 Update 的性能表现：</p><p><img src="'+g+'" alt="parallel_dml_update_read_result"></p><p>由这两张性能表现图可知：</p><ol><li>当读写数据量相同的情况下，Parallel Update 最高能提升 3 倍的性能</li><li>读数据量越大，Parallel Update 性能提升幅度越大，最高能到达 10 倍的提升</li><li>提升写入并行度对性能提升不大，原因同上</li></ol><h3 id="parallel-delete-3" tabindex="-1"><a class="header-anchor" href="#parallel-delete-3" aria-hidden="true">#</a> Parallel Delete</h3><p>Parallel Delete 的性能表现和结论与 Parallel Update 基本一致，不再赘述。</p>',87);function f(l,E){const o=p("Badge"),c=p("ArticleInfo"),e=p("router-link");return u(),r("div",null,[y,a(o,{type:"tip",text:"V11 / v1.1.17-",vertical:"top"}),a(c,{frontmatter:l.$frontmatter},null,8,["frontmatter"]),n("nav",D,[n("ul",null,[n("li",null,[a(e,{to:"#背景介绍"},{default:t(()=>[s("背景介绍")]),_:1})]),n("li",null,[a(e,{to:"#术语"},{default:t(()=>[s("术语")]),_:1})]),n("li",null,[a(e,{to:"#功能介绍"},{default:t(()=>[s("功能介绍")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#parallel-insert"},{default:t(()=>[s("Parallel Insert")]),_:1})]),n("li",null,[a(e,{to:"#parallel-update"},{default:t(()=>[s("Parallel Update")]),_:1})]),n("li",null,[a(e,{to:"#parallel-delete"},{default:t(()=>[s("Parallel Delete")]),_:1})])])]),n("li",null,[a(e,{to:"#功能设计"},{default:t(()=>[s("功能设计")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#parallel-insert-1"},{default:t(()=>[s("Parallel Insert")]),_:1})]),n("li",null,[a(e,{to:"#parallel-update-1"},{default:t(()=>[s("Parallel Update")]),_:1})]),n("li",null,[a(e,{to:"#parallel-delete-1"},{default:t(()=>[s("Parallel Delete")]),_:1})])])]),n("li",null,[a(e,{to:"#使用说明"},{default:t(()=>[s("使用说明")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#parallel-insert-2"},{default:t(()=>[s("Parallel Insert")]),_:1})]),n("li",null,[a(e,{to:"#parallel-update-2"},{default:t(()=>[s("Parallel Update")]),_:1})]),n("li",null,[a(e,{to:"#parallel-delete-2"},{default:t(()=>[s("Parallel Delete")]),_:1})])])]),n("li",null,[a(e,{to:"#性能表现"},{default:t(()=>[s("性能表现")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#parallel-insert-3"},{default:t(()=>[s("Parallel Insert")]),_:1})]),n("li",null,[a(e,{to:"#parallel-update-3"},{default:t(()=>[s("Parallel Update")]),_:1})]),n("li",null,[a(e,{to:"#parallel-delete-3"},{default:t(()=>[s("Parallel Delete")]),_:1})])])])])]),S])}const O=i(w,[["render",f],["__file","parallel-dml.html.vue"]]);export{O as default};
