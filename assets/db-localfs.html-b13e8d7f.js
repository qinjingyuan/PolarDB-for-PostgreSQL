import{_ as c,M as o,p as d,q as i,N as s,R as a,V as t,t as n,a1 as u}from"./framework-de73eade.js";const _={},k=a("h1",{id:"基于单机文件系统部署",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#基于单机文件系统部署","aria-hidden":"true"},"#"),n(" 基于单机文件系统部署")],-1),b=a("p",null,"本文将指导您在单机文件系统（如 ext4）上编译部署 PolarDB-PG，适用于所有计算节点都可以访问相同本地磁盘存储的场景。",-1),h={class:"table-of-contents"},v=a("h2",{id:"拉取镜像",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#拉取镜像","aria-hidden":"true"},"#"),n(" 拉取镜像")],-1),m={href:"https://hub.docker.com/r/polardb/polardb_pg_local_instance/tags",target:"_blank",rel:"noopener noreferrer"},f=a("code",null,"linux/amd64",-1),g=a("code",null,"linux/arm64",-1),P=u(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull polardb/polardb_pg_local_instance
</code></pre></div><h2 id="初始化数据库" tabindex="-1"><a class="header-anchor" href="#初始化数据库" aria-hidden="true">#</a> 初始化数据库</h2><p>新建一个空白目录 <code>\${your_data_dir}</code> 作为 PolarDB-PG 实例的数据目录。启动容器时，将该目录作为 VOLUME 挂载到容器内，对数据目录进行初始化。在初始化的过程中，可以传入环境变量覆盖默认值：</p><ul><li><code>POLARDB_PORT</code>：PolarDB-PG 运行所需要使用的端口号，默认值为 <code>5432</code>；镜像将会使用三个连续的端口号（默认 <code>5432-5434</code>）</li><li><code>POLARDB_USER</code>：初始化数据库时创建默认的 superuser（默认 <code>postgres</code>）</li><li><code>POLARDB_PASSWORD</code>：默认 superuser 的密码</li></ul><p>使用如下命令初始化数据库：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--env</span> <span class="token assign-left variable">POLARDB_PORT</span><span class="token operator">=</span><span class="token number">5432</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--env</span> <span class="token assign-left variable">POLARDB_USER</span><span class="token operator">=</span>u1 <span class="token punctuation">\\</span>
    <span class="token parameter variable">--env</span> <span class="token assign-left variable">POLARDB_PASSWORD</span><span class="token operator">=</span>your_password <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> <span class="token variable">\${your_data_dir}</span>:/var/polardb <span class="token punctuation">\\</span>
    polardb/polardb_pg_local_instance <span class="token punctuation">\\</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;done&#39;</span>
</code></pre></div><h2 id="启动-polardb-pg-服务" tabindex="-1"><a class="header-anchor" href="#启动-polardb-pg-服务" aria-hidden="true">#</a> 启动 PolarDB-PG 服务</h2><p>数据库初始化完毕后，使用 <code>-d</code> 参数以后台模式创建容器，启动 PolarDB-PG 服务。通常 PolarDB-PG 的端口需要暴露给外界使用，使用 <code>-p</code> 参数将容器内的端口范围暴露到容器外。比如，初始化数据库时使用的是 <code>5432-5434</code> 端口，如下命令将会把这三个端口映射到容器外的 <code>54320-54322</code> 端口：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">54320</span>-54322:5432-5434 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> <span class="token variable">\${your_data_dir}</span>:/var/polardb <span class="token punctuation">\\</span>
    polardb/polardb_pg_local_instance
</code></pre></div><p>或者也可以直接让容器与宿主机共享网络：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--network</span><span class="token operator">=</span>host <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> <span class="token variable">\${your_data_dir}</span>:/var/polardb <span class="token punctuation">\\</span>
    polardb/polardb_pg_local_instance
</code></pre></div>`,11);function B(l,D){const r=o("ArticleInfo"),e=o("router-link"),p=o("ExternalLinkIcon");return d(),i("div",null,[k,s(r,{frontmatter:l.$frontmatter},null,8,["frontmatter"]),b,a("nav",h,[a("ul",null,[a("li",null,[s(e,{to:"#拉取镜像"},{default:t(()=>[n("拉取镜像")]),_:1})]),a("li",null,[s(e,{to:"#初始化数据库"},{default:t(()=>[n("初始化数据库")]),_:1})]),a("li",null,[s(e,{to:"#启动-polardb-pg-服务"},{default:t(()=>[n("启动 PolarDB-PG 服务")]),_:1})])])]),v,a("p",null,[n("我们在 DockerHub 上提供了 PolarDB-PG 的 "),a("a",m,[n("本地实例镜像"),s(p)]),n("，里面已包含启动 PolarDB-PG 本地存储实例的入口脚本。镜像目前支持 "),f,n(" 和 "),g,n(" 两种 CPU 架构。")]),P])}const R=c(_,[["render",B],["__file","db-localfs.html.vue"]]);export{R as default};
